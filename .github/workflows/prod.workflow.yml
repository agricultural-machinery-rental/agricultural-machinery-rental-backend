name: Build and deploy to production
on:
  push:
    branches:
      - feature/deploy
jobs:
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Generate .env
        run: |
          export $(echo "${{ secrets.SECRET_KEY }}" | sed 's/=/="/; s/$/"/')
          export $(echo "${{ secrets.ALLOWED_HOSTS }}" | sed 's/=/="/; s/$/"/')
          export $(echo "${{ secrets.POSTGRES_DB }}" | sed 's/=/="/; s/$/"/')
          export $(echo "${{ secrets.POSTGRES_USER }}" | sed 's/=/="/; s/$/"/')
          export $(echo "${{ secrets.POSTGRES_PASSWORD }}" | sed 's/=/="/; s/$/"/')
          export $(echo "${{ secrets.POSTGRES_SERVER }}" | sed 's/=/="/; s/$/"/')
          export $(echo "${{ secrets.POSTGRES_PORT }}" | sed 's/=/="/; s/$/"/')
          envsubst < .env.example > .env
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          build-args: ENV_FILE=.env
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/amr:latest
      - name: Upload .env file
        uses: actions/upload-artifact@v2
        with:
          name: .env
          path: .env

  deploy:
    name: Deploy from image in Docker Hub
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: Download .env file
        uses: actions/download-artifact@v2
        with:
          name: .env
      - name: Save .env contents
        run: |
          ENV_CONTENTS=$(cat .env)
          echo "::set-output name=env::$ENV_CONTENTS"
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_LOGIN }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd deploy
            docker-compose stop
            docker-compose rm -f backend
            docker rmi $(docker images '${{ secrets.DOCKER_USERNAME }}/amr' -q)
            rm .env -f
            echo "$ENV_CONTENTS" > .env
            echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" > .env
            docker-compose up -d
            docker-compose exec backend python manage.py migrate
